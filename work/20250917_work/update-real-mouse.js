const fs = require('fs');
const path = 'real-mouse-click-fix.js';
const text = fs.readFileSync(path, 'utf8');
if (text.includes('function resolveDateFromDayElement')) {
  throw new Error('Helper already inserted');
}
const helperLines = [
  '',
  '// 날짜 정보를 안전하게 계산하는 유틸리티',
  'function resolveDateFromDayElement(dayElement) {',
  '    if (!dayElement) {',
  '        return null;',
  '    }',
  '',
  '    const iso = dayElement.dataset?.date;',
  "    if (iso && /^\\d{4}-\\d{2}-\\d{2}$/.test(iso)) {",
  "        const [year, month, day] = iso.split('-').map(Number);",
  '        if ([year, month, day].every(Number.isFinite)) {',
  '            return { year, month, day };',
  '        }',
  '    }',
  '',
  '    const textValue = dayElement.textContent?.trim() || "";',
  '    const day = parseInt(textValue, 10);',
  '    if (!Number.isFinite(day)) {',
  '        return null;',
  '    }',
  '',
  '    const now = new Date();',
  '    const fallbackYear = Number.parseInt(window.currentYear, 10);',
  '    let fallbackMonth = Number.parseInt(window.currentMonth, 10);',
  '',
  '    if (!Number.isFinite(fallbackMonth)) {',
  '        if (typeof window.currentMonth === "number" && Number.isFinite(window.currentMonth)) {',
  '            fallbackMonth = window.currentMonth;',
  '        } else {',
  '            fallbackMonth = now.getMonth() + 1;',
  '        }',
  '    }',
  '',
  '    const year = Number.isFinite(fallbackYear) ? fallbackYear : now.getFullYear();',
  '    const month = Number.isFinite(fallbackMonth) ? fallbackMonth : now.getMonth() + 1;',
  '',
  '    return { year, month, day };',
  '}',
  '',
  'function openDateMemoModalSafely(dayElement) {',
  '    const dateInfo = resolveDateFromDayElement(dayElement);',
  '    if (!dateInfo) {',
  "        console.warn('날짜 정보를 계산할 수 없어 기본 모달을 열지 못했습니다.', dayElement);",
  '        return false;',
  '    }',
  '',
  '    const { year, month, day } = dateInfo;',
  "    const isoDate = ${year}--;",
  '',
  '    try {',
  '        window.selectedDate = isoDate;',
  '    } catch (error) {',
  '        window.selectedDate = isoDate;',
  '    }',
  '',
  '    const openers = [];',
  '    if (typeof window.openDateMemoModal === "function") {',
  '        openers.push(window.openDateMemoModal);',
  '    }',
  '    if (typeof window._originalOpenDateMemoModal === "function") {',
  '        openers.push(window._originalOpenDateMemoModal);',
  '    }',
  '    if (typeof window.modalManager?.openDateMemo === "function") {',
  '        openers.push(window.modalManager.openDateMemo.bind(window.modalManager));',
  '    }',
  '',
  '    for (const openFn of openers) {',
  '        try {',
  '            openFn(year, month, day);',
  '            return true;',
  '        } catch (error) {',
  "            console.error('날짜 메모 모달 열기에 실패했습니다.', error);",
  '        }',
  '    }',
  '',
  '    const titleElement = document.getElementById("dateMemoTitle");',
  '    if (titleElement) {',
  "        titleElement.textContent = ??  메모;",
  '    }',
  '',
  '    return true;',
  '}',
  '',
];
const helper = helperLines.join("\n");
const anchor = '// 실제 마우스 클릭 이벤트 처리';
const anchorIndex = text.indexOf(anchor);
if (anchorIndex === -1) {
  throw new Error('Anchor not found');
}
const updatedText = text.slice(0, anchorIndex) + helper + text.slice(anchorIndex);
const oldBlockLines = [
  '        if (target && e.isTrusted) { // 실제 사용자 클릭만 처리',
  '            const dayText = target.textContent.trim();',
  '            const day = parseInt(dayText);',
  '',
  '            if (!isNaN(day) && day >= 1 && day <= 31) {',
  "                console.log(? 실제 날짜 클릭 감지: 일);",
  '',
  '                // 모든 숨김 제거',
  '                removeAllHidingClasses();',
  '',
  '                // 날짜 모달 강제 표시',
  "                const dateMemoModal = document.getElementById('dateMemoModal');",
  '                if (dateMemoModal) {',
  "                    dateMemoModal.classList.add('modal-force-show');",
  "                    dateMemoModal.classList.remove('ultimate-hidden', 'hidden');",
  "                    dateMemoModal.style.display = 'flex';",
  "                    dateMemoModal.style.visibility = 'visible';",
  "                    dateMemoModal.style.opacity = '1';",
  "                    dateMemoModal.style.zIndex = '999999';",
  '',
  '                    // 날짜 설정',
  "                    const modalDay = document.getElementById('modalDay');",
  '                    if (modalDay) modalDay.value = day;',
  '',
  "                    console.log(?? 날짜 모달 강제 표시 완료: 일);",
  '                } else {',
  "                    console.log('? dateMemoModal 찾을 수 없음');",
  '                }',
  '            }',
  '        }'
];
const oldBlock = oldBlockLines.join("\n");
if (!updatedText.includes(oldBlock)) {
  throw new Error('Original click block not found');
}
const newBlockLines = [
  '        if (target && e.isTrusted) { // 실제 사용자 클릭만 처리',
  '            const opened = openDateMemoModalSafely(target);',
  '',
  '            if (opened) {',
  "                console.log('? 날짜 모달 정상 오픈 시도 완료');",
  '            }',
  '',
  '            removeAllHidingClasses();',
  '',
  "            const dateMemoModal = document.getElementById('dateMemoModal');",
  '            if (dateMemoModal) {',
  "                dateMemoModal.classList.add('modal-force-show');",
  "                dateMemoModal.classList.remove('ultimate-hidden', 'hidden');",
  "                dateMemoModal.style.display = 'flex';",
  "                dateMemoModal.style.visibility = 'visible';",
  "                dateMemoModal.style.opacity = '1';",
  "                dateMemoModal.style.zIndex = '999999';",
  '',
  "                const modalDay = document.getElementById('modalDay');",
  '                if (modalDay && window.selectedDate) {',
  '                    const selectedParts = window.selectedDate.split("-");',
  '                    modalDay.value = selectedParts[selectedParts.length - 1];',
  '                }',
  '',
  "                const titleElement = document.getElementById('dateMemoTitle');",
  '                if (titleElement && window.selectedDate) {',
  "                    titleElement.textContent = ??  메모;",
  '                }',
  '            } else {',
  "                console.log('? dateMemoModal 찾을 수 없음');",
  '            }',
  '        }'
];
const newBlock = newBlockLines.join("\n");
const finalText = updatedText.replace(oldBlock, newBlock);
fs.writeFileSync(path, finalText, 'utf8');
