// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite" // 개발용, 프로덕션은 "postgresql"로 변경
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(cuid())
  email        String        @unique
  passwordHash String
  createdAt    DateTime      @default(now())
  accounts     Account[]
  transactions Transaction[]
  importFiles  ImportFile[]
  receipts     Receipt[]
  rules        Rule[]
  budgets      Budget[]
}

model Account {
  id           String        @id @default(cuid())
  name         String // 예: "삼성카드", "현금"
  type         String // "card" | "cash" | "bank"
  last4        String? // 카드 마지막 4자리
  color        String? // UI 색상 코드
  userId       String
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  createdAt    DateTime      @default(now())

  @@index([userId])
}

model Category {
  id           String        @id @default(cuid())
  name         String        @unique // 예: "식비", "카페/간식", "교통", "주거/관리", "통신", "쇼핑", "여가", "의료", "교육", "수입", "기타"
  color        String? // UI 색상 코드
  transactions Transaction[]
  rules        Rule[]
  budgets      Budget[]
  createdAt    DateTime      @default(now())
}

model Transaction {
  id           String      @id @default(cuid())
  date         String // DateOnly YYYY-MM-DD (SQLite에서는 TEXT)
  postedAt     DateTime? // 실제 승인 시각 (선택)
  accountId    String
  account      Account     @relation(fields: [accountId], references: [id], onDelete: Cascade)
  amount       Int // KRW, 정수 (예: 5000 = ₩5,000). 음수는 환불/취소
  type         String // "expense" | "income" | "transfer" | "refund"
  merchant     String? // 가맹점명/상호
  memo         String? // 메모
  categoryId   String?
  category     Category?   @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  sourceFileId String?
  sourceFile   ImportFile? @relation(fields: [sourceFileId], references: [id], onDelete: SetNull)
  original     String? // JSON (원본 행 데이터 보존)
  status       String      @default("confirmed") // "confirmed" | "pending" | "excluded"
  tags         String? // JSON array of strings (예: ["#출장", "#가족"])
  receipts     Receipt[]
  userId       String
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@index([userId, date])
  @@index([accountId])
  @@index([categoryId])
  @@index([sourceFileId])
}

model Receipt {
  id              String       @id @default(cuid())
  url             String // S3 URL 또는 로컬 파일 경로
  mime            String // "image/png", "image/jpeg", "application/pdf"
  size            Int // bytes
  ocrText         String? // 추출된 전체 텍스트
  ocrAmount       Int? // OCR로 추출된 금액 (KRW 정수)
  ocrDate         String? // OCR로 추출된 날짜 YYYY-MM-DD
  ocrConfidence   Float? // 0~1 신뢰도
  linkedTxId      String?
  linkedTx        Transaction? @relation(fields: [linkedTxId], references: [id], onDelete: SetNull)
  userId          String
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  uploadedAt      DateTime     @default(now())

  @@index([userId])
  @@index([linkedTxId])
}

model ImportFile {
  id              String        @id @default(cuid())
  filename        String
  originalHeaders String // JSON (원본 헤더 배열)
  rowCount        Int
  userId          String
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions    Transaction[]
  importedAt      DateTime      @default(now())

  @@index([userId])
}

model Rule {
  id               String   @id @default(cuid())
  pattern          String // 문자열 또는 정규식 패턴
  field            String // "merchant" | "memo"
  assignCategoryId String
  assignCategory   Category @relation(fields: [assignCategoryId], references: [id], onDelete: Cascade)
  priority         Int      @default(0) // 높을수록 우선순위 높음
  isActive         Boolean  @default(true)
  userId           String
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt        DateTime @default(now())

  @@index([userId, isActive])
  @@index([priority])
}

model Budget {
  id          String   @id @default(cuid())
  month       String // YYYY-MM
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  limitAmount Int // KRW 정수
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())

  @@unique([userId, month, categoryId])
  @@index([userId, month])
}
